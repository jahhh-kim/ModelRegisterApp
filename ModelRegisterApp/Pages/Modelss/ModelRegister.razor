@page "/ModelRegister"
@inject IModelRepository repository
@inject IJSRuntime JS
@using ModelRegisterApp.Pages.Modelss

<h3>ModelRegister</h3>

<p>기종을 보여 줍니다. </p>


@if (models == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ModelCode</th>
                <th>PartID</th>
                <th>ModelName</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var model in models)
            {
            <tr>
                <td>@model.ModelCode</td>
                <td>@model.PartId</td>
                <td>@model.ModelName</td>
                <td>
                    <input type="button" value="수정" class="btn btn-primary"
                           data-toggle="modal" data-target="#modelRegisterPopup"
                           @onclick="(() => EditBy(model))" />
                </td>
                <td>
                    <input type="button" value="삭제" class="btn btn-danger"
                           @onclick="(() => DeleteBy(model))"
                           data-toggle="modal" data-target="#modelRegisterDelete" />
                </td>
            </tr>
            }
        </tbody>
    </table>


    <div>
        <input type="button" value="등록"
               data-toggle="modal" data-target="#modelRegisterPopup"
               class="btn btn-primary" @onclick="(() => btnCreate_Click())" />
    </div>

    <ModelRegisterPopup EditorModel="@model" SaveOrUpdated="@SaveOrUpdated">
        <EditorFormTitle>@editorFormTitle</EditorFormTitle>
    </ModelRegisterPopup>

    <ModelRegisterDeleteDialog OnClick="btnDelete_Click"></ModelRegisterDeleteDialog>
}

@code{

    protected void btnCreate_Click()
    {
        editorFormTitle = "등록하기";
        model = new Model(); // 모델 클리어
    }

    List<Model> models;
    private string editorFormTitle = "";

    private Model model = new Model();

    protected override async Task OnInitializedAsync()
    {
        models = await repository.GetModelAsync();
    }

    private void EditBy(Model manu)
    {
        editorFormTitle = "수정하기";
        model = manu;
    }

    private void DeleteBy(Model manu)
    {

        model = manu;
    }
    protected async Task btnDelete_Click()
    {
        //await JS.InvokeAsync<object>("alert", "여기까지 왔군요?" + manufacturer.Id + "번을 지울건가요");
        await repository.DeleteModelAsync(model.ModelCode); //삭제
        await JS.InvokeAsync<object>("closeModal", "modelRegisterDelete");
        models = await repository.GetModelAsync(); //다시읽어오기
        model = new Model();// 선택항목 초기화
    }

    //등록 또는 수정 후 현재 페이지 다시 로드
    private async void SaveOrUpdated()
    {
        models = await repository.GetModelAsync(); //다시읽어오기
        StateHasChanged();
    }


}
